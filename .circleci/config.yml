version: 2.1
jobs:

    unit-tests:
        machine: true
        steps:
            - checkout
            - run: echo "Running unit tests"

    integration-tests:
        machine: true
        steps:
            - checkout
            - run: echo "Running integration tests"

    stress-tests:
        machine: true
        steps:
            - checkout
            - run: echo "Running stress tests"
    build-test:
        machine: true
        steps:
            - checkout
            - run:
                name: Build the test image
                command: docker build -t aliwhat .
    
    
    deploy-staging:
        docker:
            - image: google/cloud-sdk
        environment:
            PROJECT_NAME: "aliwhat"
            GOOGLE_PROJECT_ID: "ilyes-sandbox"
            GOOGLE_COMPUTE_ZONE: "europe-west4-a"
            GOOGLE_CLUSTER_NAME: "sandbox"
        steps:
            - checkout
            - run: 
                name: Setup Google Cloud SDK
                command: bash deployment/scripts/gcloud_setup.sh
                    
            - setup_remote_docker
            - run: 
                name: Docker build
                command: bash deployment/scripts/docker_build.sh
            
            - run: 
                name: Docker push
                command: bash deployment/scripts/docker_push.sh
            
            - run:
                name: Install and configure Helm
                command: bash deployment/scripts/install_helm.sh
            
            - run: 
                name: Deploy to Kubernetes
                command: helm upgrade aliwhat deployment/aliwhat  --set image.tag=${CIRCLE_SHA1}
    
    deploy-prod:
        docker:
            - image: google/cloud-sdk
        environment:
            PROJECT_NAME: "aliwhat"
            GOOGLE_PROJECT_ID: "ilyes-sandbox"
            GOOGLE_COMPUTE_ZONE: "europe-west4-a"
            GOOGLE_CLUSTER_NAME: "sandbox"
        steps:
            - checkout
            - run: 
                name: Setup Google Cloud SDK
                command: |
                    apt-get install -qq -y gettext
                    echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
                    gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
                    gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
                    gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
                    gcloud --quiet container clusters get-credentials ${GOOGLE_CLUSTER_NAME}
            - setup_remote_docker
            - run: 
                name: Docker build and push
                command: |
                    docker build \
                    --build-arg COMMIT_REF=${CIRCLE_TAG} \
                    -t ${PROJECT_NAME} .
                    docker tag ${PROJECT_NAME} eu.gcr.io/${GOOGLE_PROJECT_ID}/${PROJECT_NAME}:${CIRCLE_TAG}
                    gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://eu.gcr.io
                    docker push eu.gcr.io/${GOOGLE_PROJECT_ID}/${PROJECT_NAME}:${CIRCLE_TAG}
            
            - run:
                name: Install and configure Helm
                command: |
                    curl https://raw.githubusercontent.com/kubernetes/helm/v2.12.2/scripts/get | bash
                    helm init -c
            
            - run: 
                name: Deploy to Kubernetes
                command: helm upgrade aliwhat deployment/aliwhat  --set image.tag=${CIRCLE_TAG}

workflows:
  version: 2
  workflow:
    jobs:
        - unit-tests:
            filters:
                tags:
                    only: /^[0-9]+.[0-9]+.[0-9]+$/

        - integration-tests:
            filters:
                tags:
                    only: /^[0-9]+.[0-9]+.[0-9]+$/

        - stress-tests:
            filters:
                branches:
                    only:
                        - master
                tags:
                    only: /^[0-9]+.[0-9]+.[0-9]+$/

        
        # Test if building the docker image is safe
        - build-test:
            requires:
                - unit-tests
                - integration-tests
                - stress-tests
            filters:
                branches:
                    ignore: /.*/
                        - master
                        - develop
                tags:
                    ignore: /^[0-9]+.[0-9]+.[0-9]+$/
        
        # Hold before deploying to production
        # Production is only triggerd on releases
        - hold:
            type: approval
            requires:
                - unit-tests
                - integration-tests
                - stress-tests
            filters:
                branches:
                    ignore: /.*/
                tags:
                    only: /^[0-9]+.[0-9]+.[0-9]+$/
        
        - deploy-prod:
            requires:
                - hold
            filters:
                branches:
                    ignore: /.*/
                tags:
                    only: /^[0-9]+.[0-9]+.[0-9]+$/
        
        # Deploy to staging when new commits on develop
        - deploy-staging:
            requires:
                - unit-tests
                - integration-tests
                - stress-tests
            filters:
                branches:
                    only:
                        - develop